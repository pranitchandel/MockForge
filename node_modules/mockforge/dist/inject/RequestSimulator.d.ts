import { HttpMockResponse, IMockForgeState, MockAPI } from '../sdk/common/types';
import { IMockForgeStateService } from '../server/common/service';
export interface RequestParameters {
    url?: string | URL;
    method?: string;
    headers?: Record<string, string>;
    body?: Document | XMLHttpRequestBodyInit | null | FormData | BodyInit;
}
export interface ValidRequest {
    url: string;
    method: string;
    headers?: Record<string, string>;
    body?: null | string | FormData;
    params?: Record<string, string>;
}
export interface SimulatedResponse {
    status: number;
    body: string;
}
export interface ISimulatedRequestHandler {
    setApiList(apiList: MockAPI[]): void;
    setState(state: IMockForgeState): void;
    handleSimulatedRequest(request: RequestParameters): SimulatedResponse | null;
    logToNetwork(request: RequestParameters, response: SimulatedResponse): void;
}
export declare class RequestSimulator implements ISimulatedRequestHandler {
    private origin;
    private serverURL;
    private service;
    constructor(origin: string, serverURL: string, service: IMockForgeStateService);
    private apiCollection;
    private state;
    setApiList(apiList: MockAPI[]): void;
    setState(state: IMockForgeState): void;
    private getActiveAPIs;
    handleSimulatedRequest(request: RequestParameters): SimulatedResponse | null;
    _handleSimulatedRequest(request: RequestParameters): HttpMockResponse | null;
    private isFormUrlEncoded;
    private findMathResponse;
    private findMatchingApi;
    logToNetwork(request: RequestParameters, response: SimulatedResponse): Promise<void>;
}
