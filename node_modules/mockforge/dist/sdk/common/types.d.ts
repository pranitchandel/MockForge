export interface IMockForgeState {
    __cache__?: string;
    name?: string;
    http: IHttpApiState[];
}
export type SaveMockStateSchema = Pick<IMockForgeState, 'http'>;
export interface IHttpApiState {
    method: string;
    pathname: string;
    activeMockResponses: string[];
}
export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
export type MockAPIMetadata = {
    name: string;
    description: string;
};
export interface HttpMockAPI {
    type: 'http';
    pathname: string;
    method: HttpMethod;
    name: string;
    description?: string;
    mockResponses: HttpMockResponse[];
}
export type MockAPI = HttpMockAPI;
export type AddHttpMockAPI = Omit<HttpMockAPI, 'mockResponses'> & {
    mockResponses: AddHttpMockResponse[];
};
export type AddMockAPI = AddHttpMockAPI;
export interface HttpMockResponse {
    name: string;
    $schema: string;
    schema: 'http_response_v1';
    description?: string;
    requestMatcher: {
        type: 'basic-match';
        content: {
            body?: unknown;
            params?: Record<string, string>;
            headers?: Record<string, string>;
            query?: Record<string, string>;
        };
    } | null;
    responseData: {
        type: 'json';
        content: unknown;
    };
}
export type AddHttpMockResponse = Omit<HttpMockResponse, '$schema'>;
export type UpdateHttpMockAPISchema = Pick<HttpMockAPI, 'method' | 'description'>;
