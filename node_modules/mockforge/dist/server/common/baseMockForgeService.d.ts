import type { WebSocket as WsWebsocket } from 'ws';
import { AddHttpMockResponse, AddMockAPI, HttpMockResponse, IMockForgeState, MockAPI, MockAPIMetadata } from '../../sdk/common/types';
import { IMockForgeEventListener, MockForgeEvent } from '../../server/common/event';
import { IHttpMatchedMockResult, IMockForgeStateService } from '../../server/common/service';
export declare abstract class BaseMockForgeService implements IMockForgeEventListener, IMockForgeStateService {
    private baseUrl;
    private clientId;
    private ws;
    private emitter;
    private pendingRPCs;
    constructor(baseUrl: string, clientId: string);
    protected abstract getWebsocket(url: string): WebSocket | WsWebsocket;
    handleEvent(handler: (event: MockForgeEvent) => void): void;
    removeEventListener(handler: (event: MockForgeEvent) => void): void;
    connect(): Promise<void>;
    private callRPC;
    getMockForgeState(): Promise<IMockForgeState>;
    toggleHttpApiResponse(method: string, pathname: string, responseName: string): Promise<void>;
    addMockAPI(mockAPI: AddMockAPI): Promise<void>;
    listMockAPIs(): Promise<MockAPI[]>;
    deleteHttpMockAPI(method: string, pathname: string): Promise<void>;
    updateHttpMockAPI(method: string, pathname: string, data: MockAPIMetadata): Promise<void>;
    addHttpMockResponse(method: string, pathname: string, mockResponse: AddHttpMockResponse): Promise<HttpMockResponse>;
    deleteHttpMockResponse(method: string, pathname: string, mockResponseName: string): Promise<void>;
    getInitialState(): Promise<any>;
    registerHttpMockResult(option: IHttpMatchedMockResult): Promise<string>;
    getHttpMockResult(uuid: string): Promise<IHttpMatchedMockResult | null>;
    saveMockState(stateName: string, state: IMockForgeState): Promise<void>;
    readMockState(stateName: string): Promise<IMockForgeState>;
    listMockStates(): Promise<string[]>;
    deleteMockState(stateName: string): Promise<void>;
    loadMockState(name: string): Promise<IMockForgeState>;
    saveCurrentMockState(name: string): Promise<string[]>;
    switchDefaultMockState(): Promise<void>;
}
